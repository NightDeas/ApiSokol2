// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApi;

#nullable disable

namespace WebApiMigrations
{
    [DbContext(typeof(Context))]
    [Migration("20241009084628_fixNewsv2")]
    partial class fixNewsv2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApi.Models.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f76c24f4-073c-4ef4-8b8d-2f2ecbcc087e"),
                            Created = new DateTimeOffset(new DateTime(2024, 10, 13, 8, 46, 28, 697, DateTimeKind.Unspecified).AddTicks(6216), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Desc1",
                            Title = "Title1"
                        });
                });

            modelBuilder.Entity("WebApi.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Sum")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("46092bf3-34f7-4851-a885-a5d54fe3fb43"),
                            Count = 1,
                            ProductId = new Guid("a8a860ef-0dda-4bbe-ba6a-f9f9aae437ff"),
                            Sum = 1m,
                            UserId = new Guid("0e0e539b-701c-4e0d-ae00-ca994e6dee1a")
                        });
                });

            modelBuilder.Entity("WebApi.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a8a860ef-0dda-4bbe-ba6a-f9f9aae437ff"),
                            Count = 1,
                            Name = "Цифровой арт \"Далекое будущее\"",
                            Price = 5000m,
                            TypeId = new Guid("3a926894-f547-4c27-be60-73630ed2104c")
                        },
                        new
                        {
                            Id = new Guid("63bbc6e5-2e00-4ffe-8d1d-930b2fde0fc3"),
                            Count = 1,
                            Name = "Видеоурок \"Как сделать первый 3D дизайн\"",
                            Price = 2000m,
                            TypeId = new Guid("3a926894-f547-4c27-be60-73630ed2104c")
                        },
                        new
                        {
                            Id = new Guid("816affd9-1bdb-4f45-9b03-570fd48ea190"),
                            Count = 1,
                            Name = "Курс \"Художник за месяц\"",
                            Price = 6000m,
                            TypeId = new Guid("3a926894-f547-4c27-be60-73630ed2104c")
                        },
                        new
                        {
                            Id = new Guid("cc44c11f-cd20-4968-a052-8a6c3ccc74dd"),
                            Count = 1,
                            Name = "Песня, сгенерированная нейросетью",
                            Price = 100m,
                            TypeId = new Guid("3a926894-f547-4c27-be60-73630ed2104c")
                        },
                        new
                        {
                            Id = new Guid("a7df5752-81a7-4bcd-b259-18ae2ae61744"),
                            Count = 1,
                            Name = "Цифровой арт \"Цифровое искусство\"",
                            Price = 5000m,
                            TypeId = new Guid("3a926894-f547-4c27-be60-73630ed2104c")
                        },
                        new
                        {
                            Id = new Guid("94a876e6-d27b-4613-b550-9ad3d81bcbf8"),
                            Count = 1,
                            Name = "Видеоурок \"Песня \"Ромашки\" на гитаре\"",
                            Price = 2000m,
                            TypeId = new Guid("3a926894-f547-4c27-be60-73630ed2104c")
                        },
                        new
                        {
                            Id = new Guid("bc2459d8-8a61-471d-b4e1-46e63aa27658"),
                            Count = 1,
                            Name = "Цифровой арт \"Красивый город\"",
                            Price = 5000m,
                            TypeId = new Guid("3a926894-f547-4c27-be60-73630ed2104c")
                        },
                        new
                        {
                            Id = new Guid("aa6424a4-807b-4841-90fd-efb5b0a4a6c4"),
                            Count = 1,
                            Name = "Реклама",
                            Price = 10000m,
                            TypeId = new Guid("81c6969d-569a-4ab5-8ef0-43430b254a9f")
                        },
                        new
                        {
                            Id = new Guid("a0a6ea53-a7f2-46e7-ab2c-3e843e6f2310"),
                            Count = 1,
                            Name = "Помощь с идеей для вашего проекта",
                            Price = 500m,
                            TypeId = new Guid("81c6969d-569a-4ab5-8ef0-43430b254a9f")
                        },
                        new
                        {
                            Id = new Guid("b67687cf-8e4a-4f31-9b2d-03376cd4f4d4"),
                            Count = 1,
                            Name = "Онлайн урок по рисованию",
                            Price = 1900m,
                            TypeId = new Guid("81c6969d-569a-4ab5-8ef0-43430b254a9f")
                        });
                });

            modelBuilder.Entity("WebApi.Models.TypeProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeProducts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a926894-f547-4c27-be60-73630ed2104c"),
                            Name = "Товар"
                        },
                        new
                        {
                            Id = new Guid("81c6969d-569a-4ab5-8ef0-43430b254a9f"),
                            Name = "Услуга"
                        });
                });

            modelBuilder.Entity("WebApi.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<string>("FIO")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsClient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProvider")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e0e539b-701c-4e0d-ae00-ca994e6dee1a"),
                            Discount = 10m,
                            FIO = "Иванов Иван Иванович",
                            IsClient = true,
                            IsProvider = true
                        },
                        new
                        {
                            Id = new Guid("1d4c605c-5906-400f-b17a-7022e5c3ccb4"),
                            Discount = 0m,
                            FIO = "Петров Петр Петрович",
                            IsClient = true,
                            IsProvider = false
                        },
                        new
                        {
                            Id = new Guid("b129c46e-51df-4bf4-8df7-76bff66750af"),
                            Discount = 0m,
                            FIO = "Максимов Максим Максимович",
                            IsClient = false,
                            IsProvider = true
                        });
                });

            modelBuilder.Entity("WebApi.Models.Order", b =>
                {
                    b.HasOne("WebApi.Models.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Models.Product", b =>
                {
                    b.HasOne("WebApi.Models.TypeProduct", "TypeProduct")
                        .WithMany("Products")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeProduct");
                });

            modelBuilder.Entity("WebApi.Models.Product", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebApi.Models.TypeProduct", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebApi.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
