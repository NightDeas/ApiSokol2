// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApi;

#nullable disable

namespace WebApiMigrations
{
    [DbContext(typeof(Context))]
    [Migration("20241009084325_fixNews")]
    partial class fixNews
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApi.Models.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e335c050-354b-42f4-8561-9118339c6cb9"),
                            Created = new DateTime(2024, 10, 25, 8, 43, 24, 779, DateTimeKind.Utc).AddTicks(5681),
                            Description = "Desc1",
                            Title = "Title1"
                        });
                });

            modelBuilder.Entity("WebApi.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Sum")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d02ff807-131c-45e8-a6e5-1ed8d2890a7e"),
                            Count = 1,
                            ProductId = new Guid("48317e7e-b453-4bc6-92d2-3eab900c0fa6"),
                            Sum = 1m,
                            UserId = new Guid("1531297b-56d7-4995-af25-e46596f6aa57")
                        });
                });

            modelBuilder.Entity("WebApi.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("48317e7e-b453-4bc6-92d2-3eab900c0fa6"),
                            Count = 1,
                            Name = "Цифровой арт \"Далекое будущее\"",
                            Price = 5000m,
                            TypeId = new Guid("d05fe978-8895-462a-af5b-82c3afd94a75")
                        },
                        new
                        {
                            Id = new Guid("6775fa60-fc4e-4ca0-a1ed-9b32d7e53350"),
                            Count = 1,
                            Name = "Видеоурок \"Как сделать первый 3D дизайн\"",
                            Price = 2000m,
                            TypeId = new Guid("d05fe978-8895-462a-af5b-82c3afd94a75")
                        },
                        new
                        {
                            Id = new Guid("81aad1fd-3801-4a02-9458-02a7854a5512"),
                            Count = 1,
                            Name = "Курс \"Художник за месяц\"",
                            Price = 6000m,
                            TypeId = new Guid("d05fe978-8895-462a-af5b-82c3afd94a75")
                        },
                        new
                        {
                            Id = new Guid("09afb0b8-76fe-40d1-917d-c0d6efcb6f81"),
                            Count = 1,
                            Name = "Песня, сгенерированная нейросетью",
                            Price = 100m,
                            TypeId = new Guid("d05fe978-8895-462a-af5b-82c3afd94a75")
                        },
                        new
                        {
                            Id = new Guid("f9ef5306-25e5-4d70-88d2-dbea89850c34"),
                            Count = 1,
                            Name = "Цифровой арт \"Цифровое искусство\"",
                            Price = 5000m,
                            TypeId = new Guid("d05fe978-8895-462a-af5b-82c3afd94a75")
                        },
                        new
                        {
                            Id = new Guid("dc988e29-6ef9-4c44-89e9-afd13d828fd6"),
                            Count = 1,
                            Name = "Видеоурок \"Песня \"Ромашки\" на гитаре\"",
                            Price = 2000m,
                            TypeId = new Guid("d05fe978-8895-462a-af5b-82c3afd94a75")
                        },
                        new
                        {
                            Id = new Guid("5a1a0003-bbf5-43bc-88fa-3f1f5ba687d5"),
                            Count = 1,
                            Name = "Цифровой арт \"Красивый город\"",
                            Price = 5000m,
                            TypeId = new Guid("d05fe978-8895-462a-af5b-82c3afd94a75")
                        },
                        new
                        {
                            Id = new Guid("bf29ea44-813b-47bb-b636-98959aa45234"),
                            Count = 1,
                            Name = "Реклама",
                            Price = 10000m,
                            TypeId = new Guid("045eef69-46cf-4a29-bcb4-bd82fb18a195")
                        },
                        new
                        {
                            Id = new Guid("7ba56657-d1b0-4a62-a933-04381519feee"),
                            Count = 1,
                            Name = "Помощь с идеей для вашего проекта",
                            Price = 500m,
                            TypeId = new Guid("045eef69-46cf-4a29-bcb4-bd82fb18a195")
                        },
                        new
                        {
                            Id = new Guid("0984269e-e6f6-4d76-9067-38895d1a91bd"),
                            Count = 1,
                            Name = "Онлайн урок по рисованию",
                            Price = 1900m,
                            TypeId = new Guid("045eef69-46cf-4a29-bcb4-bd82fb18a195")
                        });
                });

            modelBuilder.Entity("WebApi.Models.TypeProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeProducts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d05fe978-8895-462a-af5b-82c3afd94a75"),
                            Name = "Товар"
                        },
                        new
                        {
                            Id = new Guid("045eef69-46cf-4a29-bcb4-bd82fb18a195"),
                            Name = "Услуга"
                        });
                });

            modelBuilder.Entity("WebApi.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<string>("FIO")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsClient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProvider")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1531297b-56d7-4995-af25-e46596f6aa57"),
                            Discount = 10m,
                            FIO = "Иванов Иван Иванович",
                            IsClient = true,
                            IsProvider = true
                        },
                        new
                        {
                            Id = new Guid("d972a32d-2ec9-4b26-8970-ca36461b8e54"),
                            Discount = 0m,
                            FIO = "Петров Петр Петрович",
                            IsClient = true,
                            IsProvider = false
                        },
                        new
                        {
                            Id = new Guid("81789b7c-749c-43a8-a30e-4e6fe7a6a01b"),
                            Discount = 0m,
                            FIO = "Максимов Максим Максимович",
                            IsClient = false,
                            IsProvider = true
                        });
                });

            modelBuilder.Entity("WebApi.Models.Order", b =>
                {
                    b.HasOne("WebApi.Models.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Models.Product", b =>
                {
                    b.HasOne("WebApi.Models.TypeProduct", "TypeProduct")
                        .WithMany("Products")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeProduct");
                });

            modelBuilder.Entity("WebApi.Models.Product", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebApi.Models.TypeProduct", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebApi.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
